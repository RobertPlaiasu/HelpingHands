// <auto-generated />
using System;
using HelpingHands;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HelpingHands.Migrations
{
    [DbContext(typeof(HelpingHandsDbContext))]
    [Migration("20231028091206_ChangePropertiestToNull")]
    partial class ChangePropertiestToNull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HelpingHands.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ajutor oameni fara adapost"
                        });
                });

            modelBuilder.Entity("HelpingHands.Entities.Need", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Needs");
                });

            modelBuilder.Entity("HelpingHands.Entities.Ong", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ONGDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ocupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<long>("x")
                        .HasColumnType("bigint");

                    b.Property<long>("y")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Ongs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Str Maresal Dumtrescu nr. 555",
                            CategoryId = 1,
                            Image = "./default.png",
                            Number = "3213132213",
                            ONGDescription = "Descrierea unui ONG ce se ocupa cu ajutarea oameniilor nevoiasi.",
                            Ocupation = "Oameni fara adapost",
                            UserId = 1,
                            x = 44393315591258590L,
                            y = 26043945138016127L
                        });
                });

            modelBuilder.Entity("HelpingHands.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameNeed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OngId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("numberNeed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OngId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("HelpingHands.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OngId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("numberStars")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OngId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("HelpingHands.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Exp")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OngId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "bob@bob.com",
                            Exp = 0,
                            Level = 0,
                            Name = "Bob",
                            RefreshToken = "",
                            Role = "user"
                        },
                        new
                        {
                            Id = 2,
                            Email = "sarah@sarah.com",
                            Exp = 0,
                            Level = 0,
                            Name = "Sarah",
                            OngId = 1,
                            RefreshToken = "",
                            Role = "user"
                        });
                });

            modelBuilder.Entity("HelpingHands.Entities.Need", b =>
                {
                    b.HasOne("HelpingHands.Entities.Post", "Post")
                        .WithMany("Needs")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("HelpingHands.Entities.Ong", b =>
                {
                    b.HasOne("HelpingHands.Entities.Category", "Category")
                        .WithMany("Ongs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HelpingHands.Entities.User", "User")
                        .WithOne("Ong")
                        .HasForeignKey("HelpingHands.Entities.Ong", "Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HelpingHands.Entities.Post", b =>
                {
                    b.HasOne("HelpingHands.Entities.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HelpingHands.Entities.Ong", "Ong")
                        .WithMany("Posts")
                        .HasForeignKey("OngId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Ong");
                });

            modelBuilder.Entity("HelpingHands.Entities.Review", b =>
                {
                    b.HasOne("HelpingHands.Entities.Ong", "Ong")
                        .WithMany("Reviews")
                        .HasForeignKey("OngId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ong");
                });

            modelBuilder.Entity("HelpingHands.Entities.Category", b =>
                {
                    b.Navigation("Ongs");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("HelpingHands.Entities.Ong", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("HelpingHands.Entities.Post", b =>
                {
                    b.Navigation("Needs");
                });

            modelBuilder.Entity("HelpingHands.Entities.User", b =>
                {
                    b.Navigation("Ong");
                });
#pragma warning restore 612, 618
        }
    }
}
